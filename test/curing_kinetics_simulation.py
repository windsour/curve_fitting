import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# ================== 参数设置 ==================
A = 6.47e+05        # 频率因子 (s^-1)
Ea = 70008.58       # 活化能 (J/mol)
R = 8.314           # 气体常数 (J/(mol·K))
T = 338             # 温度 (K)
n = 0.66            # 反应级数
alpha0 = 0.01109    # 初始固化度

# 计算速率常数 k
k = A * np.exp(-Ea / (R * T))

# 定义微分方程
def dalpha_dt(t, alpha):
    return k * (1 - alpha)**n

# 时间范围（用于求解）
t_span = (0, 500000)  # 略大于你的最大时间点 122.6，保险起见设到130



# 自定义的时间点（你的实际测量时刻）
# t_custom = np.array([
#     0, 3.06523, 5.27219, 7.11133, 8.88916, 10.85091, 12.19961, 13.67092, 15.14223,
#     16.49093, 17.90093, 19.12702, 20.53703, 22.00834, 23.66356, 25.25748, 27.28053,
#     30.16184, 35.06621, 40.64492, 46.59147, 51.80235, 57.62629, 64.98283, 71.54242,
#     76.01766, 80.30897, 84.7229, 89.19814, 94.1025, 97.29034, 103.42079, 107.65081,
#     111.69691, 119.23737, 122.60912
# ])            #单位为小时
t_custom = np.array([
    0, 11034.828, 18979.884, 25600.788, 32000.976, 39063.276, 43918.596, 49215.312, 54512.028,
                   59367.348, 64443.348, 68857.272, 73933.308, 79230.024, 85188.816, 90926.928, 98210.908,
                   108582.624, 126238.356, 146321.712, 167729.292, 186488.460, 207454.644, 233938.188, 257552.712,
                   273663.576, 289112.292, 305002.440, 321113.304, 338769.000, 350245.224, 372314.844, 387542.916,
                   402108.876, 429254.532, 441392.832
])              #单位为秒


# 实验测得的固化度数据
alpha_experiment = np.array([
    0.01109, 0.04879, 0.09647, 0.14859, 0.1996, 0.25171, 0.2994, 0.35151, 0.39808,
    0.4502, 0.49788, 0.54667, 0.59879, 0.64647, 0.70081, 0.75071, 0.79839, 0.8505,
    0.90151, 0.92036, 0.93367, 0.93921, 0.94587, 0.9503, 0.95696, 0.96139, 0.96472,
    0.96804, 0.96915, 0.9747, 0.97802, 0.98024, 0.98357, 0.98579, 0.98911, 0.99022
])

# 确保时间点在求解区间内
assert t_custom.max() <= t_span[1], "最大时间点超出求解范围，请增大t_span上限"

# ================== 求解微分方程 ==================
sol = solve_ivp(
    dalpha_dt,
    t_span,
    [alpha0],
    method='RK45',
    dense_output=True,
    rtol=1e-6,  # 提高精度
    atol=1e-9
)

# ================== 插值得到指定时间点的 alpha ==================
alpha_at_custom_times = sol.sol(t_custom)[0]

# ================== 绘图 ==================
plt.figure(figsize=(10, 6))
plt.plot(t_custom, alpha_at_custom_times, 'o-', label=r'Model Prediction')
plt.plot(t_custom, alpha_experiment, 'rx', label='Experimental Data')  # 实验数据用红色x表示
plt.xlabel('Time (s)')
plt.ylabel('Curing Degree ($\\alpha$)')
plt.title('Curing Degree vs Time at T = 338 K')
plt.grid(True, alpha=0.5)
plt.legend()
plt.tight_layout()
plt.show()

# ================== 可选：打印结果 ==================
print("Time (s)\tModel Alpha\tExperiment Alpha")
print("-" * 45)
for t, model_alpha, exp_alpha in zip(t_custom, alpha_at_custom_times, alpha_experiment):
    print(f"{t:.4f}\t{model_alpha:.6f}\t\t{exp_alpha:.6f}")
